¬import il from "../../../_shared/imageLinks"
¬import gl from "../../../_shared/glossaryLinks"
¬import dl from "../../../_shared/decodeLinks"


#### How to:

{{il.workflowEditorComplete-image}}{: .pad-top}
<em>Workflows acts a collaborative work instructions for operators and connected devices.</em>{: .pad-bottom}

Use the _Item Type_ selector to choose the **Step** type you want to add and click the **+** button to add it. As usual, it is highly recommended to assign a useful _Name_ to any **Step**. The standard **Steps** and their settings are listed below.

##### Operator Interactions
- **Operator Notification** shows a message to the operator which requires no interaction from them. The only setting is the _Message_ they are to be shown. e.g. _The robot has finished its process._
- **Operator Confirmation** shows a message to the operator with a button to confirm before the **Workflow** proceeds. The settings are a _Message_ to the operator and the _Confirm Button Content_ which is the text on the button they will see. e.g. _Load the part into the fixturing and click "Done" once complete._ - _Done_
- **Operator Input** builds on **Operator Confirmation** and also asks the operator to set the value of a {{dl.decode-variable-link}}. A selector is shown from which the {{dl.decode-variable-link}} can be chosen, and if _Validate on Change_ is active, then _decode_ will re-**solve** the {{gl.procedure-link}} every time the value is changed by the operator. e.g. _How fast should the robot go?_ - _MySpeed Variable_ - _OK_
- **Operator Choice** allows the operator to choose from one or more **Options**, each of which can branch the **Workflow**. The new settings here are _Minimum_ and _Maximum_ which specify the minimum and maximum number of **Options** the operator can select before proceeding. Setting either to `0` will allow any number of **Options** to be a valid selection. Once your **Operator Choice** has been created, two **Options** will automatically be generated within it, more can be added by selecting the **Operator Choice** and clicking the **+** with **Option** in the _Item Type_ selector.

{{il.workflowEditorOperatorInput-image}}{: .pad-top}
<em>Workflow Steps can ask the operator for input about how the process should work.</em>{: .pad-bottom}

{{il.workflowExecutorOperatorInput-image}}{: .pad-top}
<em>An editor will be shown to the operator when asking for their input.</em>{: .pad-bottom}

##### Non-Interactive
- **Set Variable** works like an **Operator Input** but does not prompt the operator. These are envisaged to be most useful within **Options** but are not limited to that case. If **Visible To Operator** is activate, the operator will be notified that the value of the {{dl.decode-variable-link}} has been changed, and told what the new value is. The _Value_ to be set can be changed via the _Value_ **edit** button.
- **Validate** will **solve** the {{gl.procedure-link}} and has two different **Options** which allow specifying different **Workflow** branches depending on whether the **solve** succeeds or fails. The minimum alert level which counts as a failure can be set in _Failure Level_.

##### Structural
- **Group** allows the logical structuring of **Workflows** but has no inherent behaviour, exactly like **Programming** **Groups**.
- **Option** can only be added to an **Operator Choice** and defines a sub-**Workflow** which can have its own set of **Steps** which will be executed when the operator chooses that **Option**. Each **Option** can be renamed and have a **Description** added to help the operator.
- **On Success** and **On Failure** are essentially **Options** that are hardcoded into the **Validate** **Step**.
- **Go To** allows the **Workflow** to return to a previous point. These should only be used in **Options** to avoid unescapable loops.

##### Ouputs
_N.B. For any of these to run the {{gl.procedure-link}} must be validated by **Validate** or _Validate on Change_ in **Operator Input**.
- **Export Code** allows you to {{gl.export-link}} code to a folder. The Controller, _Destination_ and _Mode_ can be set. `Inline` **Mode** will create a dense code file with as little declarative code as possible. `Predeclaration` mode will do just the opposite, it will create variables wherever possible to make it easier to change things by hand should you want to. For most scenarios we recommend `Inline` as it produces shorter code and is faster. You can also set what happens once the code is {{gl.export-d-link}} in _On Export_.
- **Upload Code** allows you to {{gl.upload-link}} code directly to a Controller. The same settings as **Export Code** apply but the **Destination** is on the Controller. _Run Automatically_ will, if possible, start executing the {{gl.manipulator-link}}'s {{gl.procedure-link}} once the {{gl.upload-link}} completes.
- **Set Procedure Execution** works just like _Run Automatically_ in **Upload Code** in _Production Mode_ when set to but will run a [simulation]{{gl.simulation-link-D}} in the 3D viewport in _Simulation Mode_. It will not, however, {{gl.upload-link}} any code.

---
