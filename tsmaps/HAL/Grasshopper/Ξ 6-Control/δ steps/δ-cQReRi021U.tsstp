¬import gl from "../../../_shared/glossaryLinks"
¬import ghl from "../../../_shared/grasshopperLinks"


#### How to:

To prepare to export we must have a {{gl.procedure-link}} ready and a {{gl.controller-link}} in our document. To properly configure our {{gl.controller-link}}, we need to return to its configuration screen. This is the page you will see immediately after selecting your {{gl.controller-link}} or you can get back to it by simply double-clicking on your {{gl.controller-link}} component. We will use an ABB IRC5 as an example but the same principles hold true for any {{gl.controller-link}} preset. When we open the configuration window there are two pieces of information that we need to check. The first, and simplest, is the _Language_. If the {{gl.controller-link}} _Version_ is correctly set then this should be compatible with your real {{gl.controller-link}} but you can always export a slightly different _Language_ if you want.

The other element to verify is the **Export Settings**. These are listed on the right-hand side under the _Language_ version. You should have a list of all of your {{gl.procedures-link}}. If you haven't given them identifiable _Aliases_ now would be a good time to do so. There are three scenarios that we need to discuss with these **Export Settings**:

a.  Single Robot - For a single {{gl.manipulator-link}} setup you will just need to make sure that your path is correctly set. For ABB {{gl.controllers-link}} the path is the Task name in your real {{gl.controller-link}} but for KUKA this is an index which can remain "1". You also have the option of completely deactivating the export of a {{gl.procedure-link}} using its toggle, or exporting a {{gl.procedure-link}} as a library, which means it won't have a code entry point. This could be useful if you have pre-configured initialization or termination sequences in your {{gl.controller-link}}.

b.  Multi-Robot - The only additional check you need to make when using a multi-{{gl.manipulator-link}} configuration is that your paths are all correct. Again, that's Tasks for ABB or the equivalent for other manufacturers.

c.  External Axes - The final unique configuration is for {{gl.positioner-ea-link}}. In the HAL Robotics Framework, we require each {{gl.mechanism-link}} to have its own {{gl.procedure-link}}. With {{gl.positioner-ea-link}} we actually want to merge a number of {{gl.procedures-link}} into one to [Export]{{gl.export-link-D}} correctly. We can do this by simply dragging the [External Axes']{{gl.positioner-link-D}} [Procedure(s)]{{gl.procedure-link-D}} onto the main [Robot's]{{gl.manipulator-link-D}} {{gl.procedure-link}}. This marks it as a child {{gl.procedure-link}} of the {{gl.manipulator-link}} and they will be {{gl.export-d-link}} together. When using this kind of configuration please make sure that you have also setup your **Joint Mappings** correctly for your {{gl.positioner-ea-link}}. This can be done during the {{gl.joint-link}} creation when assembling a {{gl.mechanism-link}} from scratch or using the _Mapping_ input on the [Positioner]{{gl.positioner-link-D}} component. **Mappings** are zero-based in the HAL Robotics Framework and will automatically be converted at [Export]{{gl.export-link-D}} to match the format of the real {{gl.controller-link}}.

Now that our {{gl.controller-link}} is configured, we can place [Export]{{gl.export-link-D}} component from the **HAL Robotics** tab, **Control** panel. We can hook up our {{gl.controller-link}}, **Solution** and assign a path to the _Destination_. When we run the component by toggling _Export_ to `true` this will generate our code and give us the paths to all exported files as an output. In the second overload of this component there's one additional input worth discussing, _Mode_. `Inline` mode will create a dense code file with as little declarative code as possible. `Predeclaration` mode will do just the opposite, it will create variables wherever possible to make it easier to change things by hand should you want to. For most scenarios we recommend `Inline` as it produces shorter code and is faster.

As a final note in this tutorial, we know that there are circumstances where you may need to add very specific lines of code to your [Exports]{{gl.export-link-D}}. This could be to trigger a particular {{gl.end-effector-link}}, send a message or call another piece of code. You can do this using **Custom Actions**. These are found in the **HAL Robotics** tab, **Procedure** panel. You can add any text to the _Code_ input and it will be {{gl.export-d-link}} verbatim. If your **Custom Action** causes the {{gl.manipulator-link}} to {{gl.wait-action-link}} or some other **Simulatable** {{gl.action-link}} to occur you can add a {{gl.procedure-link}} to the _Simulation_ input. Just remember that regardless of what you add to the _Simulation_, only what you put in the _Expression_ will be {{gl.export-d-link}}. Learn more about **Custom Actions** in [this tutorial]{{ghl.grasshopper-custom-actions-link-D}}.

---
