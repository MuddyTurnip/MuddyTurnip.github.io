¬import gl from "../../../_shared/glossaryLinks"
¬import ghl from "../../../_shared/grasshopperLinks"


#### How to:

The first step in the creation of a {{gl.positioner-link}} is to ensure we have an accurate but simple model. If you're preparing something entirely custom you are likely to already have a 3D model of the positioner, however, if you're recreating something provided by a manufacturer then you will need to try and find the model on their website. Most manufacturers provide very good models of their equipment so this shouldn't be too difficult. In this demo I'll be working on an ABB `IRBP A-250`, a two-axis, rotary positioner. I have downloaded a surface-based model from the ABB website as this is easier to manipulate than meshes at the start of the process. The model provided by ABB is highly detailed and, although a detailed model looks great, a lot of the detail included is surplus to requirement for kinematics and simulation. To ensure we get smooth performance from our model of the `IRBP A-250` I've removed certain details like bolts, holes, cable connectors and even a few fillets in unseen areas. I've then meshed this simplified geometry and simplified those meshes to find a balance between fidelity and visual quality. Reference those meshes into your Grasshopper file and group meshes that are physically, statically joined together.

With our geometric model in place we also need to ensure we have certain data like the positions and limits of each {{gl.joint-link}}. The limits should be present in the datasheet for your {{gl.positioner-link}} but the rotational centres for the {{gl.joints-link}} may not be so easy to come by. If you have the exact locations, add them to your Grasshopper file as individual points. If you can't find or obtain that information then you can always make an educated guess based on the geometry you have. One way of doing that is by working with circles or other primitive curves. I have added a number of circles around geometric elements that rotate using the snaps of Rhino and add a point at the centre of each of those circles to estimate the centre of rotation for the {{gl.joint-link}}. Reference those points in to the Grasshopper document and we're ready to convert them into **Frames**. Using the in-built vector and plane tools of Grasshopper or the **Frame** component from **HAL Robotics** -\> **Utilities** we need to create a **Frame** at each {{gl.joint-link}} with the Z-axis acting as the centre of rotation. That concludes the geometric modelling phase of this process.

With our meshes and **Frames** in place we can now create our {{gl.parts-link}}. We have already covered this in the {{ghl.grasshopper-create-part-t-link}} tutorial so I won't cover it again here but remember to name your {{gl.parts-link}} appropriately to simplify debugging later.

From here we need to start connecting our {{gl.parts-link}} together using either fixed {{gl.connections-link}} or {{gl.joints-link}}. Both of these are found in **Cell** panel in the **Create Joint / Connection** component. Within that component you will find templates for Revolute {{gl.joints-link}}, Prismatic {{gl.joints-link}}, and {{gl.connections-link}}. I'm going to start with a {{gl.connection-link}} to join the headstock to the base structure. I could have made these into a single {{gl.part-link}} but, personally, I like to approximate the mechanical assembly and these are clearly different parts from that point of view. Next, we have the first {{gl.joint-link}} which connects the headstock to the swing arm. I can connect the {{gl.parts-link}} into the component with _From_ being the {{gl.part-link}} that is stationary for the {{gl.joint-link}} and _To_ being the {{gl.part-link}} moved by the {{gl.joint-link}}. I can also bring in my **Frame** that we prepared earlier and _Positions_ and _Speed_ from the datasheet. I find it easier to work in degrees rather than radians for this kind of model so I use the _Unit_ on those inputs to keep things legible. We follow exactly the same process for the second {{gl.joint-link}}. The final element we need to add to this before assembling everything we've done so far is add in the **Flange**. This is the {{gl.endpoint-link}} that a {{gl.mechanism-link}} uses when no {{gl.end-effector-link}} is mounted. This can be created as a {{gl.connection-link}} with no _To_ {{gl.part-link}} defined and _IsEndpoint_ toggled to `true`. Best practice dictates that the **Frame** of the **Flange** should always point out of the end of the {{gl.mechanism-link}}. If you want to have a {{gl.part-link}} or {{gl.end-effector-link}} attached to the end of the {{gl.positioner-link}}, this should be added after assembly of the {{gl.mechanism-link}}.

With all of the elements in place we can merge them all into a single list and pass that list to the **Assemble­** component which can be found in the **Cell** panel and takes all our {{gl.parts-link}}, {{gl.connections-link}} and {{gl.joints-link}} in the _Component_ input. It's important to note that the first element in the list must be a {{gl.part-link}} as this will be used as the base of the {{gl.mechanism-link}} and you must have at least one {{gl.connection-link}} marked as an end point. We can now see our {{gl.positioner-link}} and use it exactly as we would any other {{gl.mechanism-link}} by creating a {{gl.procedure-link}} and/or {{gl.targets-link}} for it. Please see future tutorials ([1]{{ghl.grasshopper-synchronize-motion-link-D}},[2]{{ghl.grasshopper-coupled-motion-link-D}}) to see how this can be used in conjunction with another {{gl.mechanism-link}} to create a multi-{{gl.mechanism-link}} {{gl.cell-link}} and how to save this {{gl.mechanism-link}} as a [preset]{{ghl.grasshopper-save-mechanism-preset-link-D}} that can be shared with your colleagues or peers.

If you have created a [Track]{{gl.positioner-link-D}}, you can mount a {{gl.manipulator-link}} onto it using the **Attach** component exactly as you have done [Tools]{{gl.end-effector-link-D}} in [previous tutorials]{{ghl.grasshopper-create-tool-link-D}}, ensuring to keep _IsEndEffector_ set to `true`. This is covered in more detail in the [Using a Track]{{ghl.grasshopper-track-link-D}} tutorial.

If you have assembled an external {{gl.positioner-link}}, like a rotary table, then this can be programmed in the same way as a second {{gl.manipulator-link}}. This is detailed in the [Synchronize Motion]{{ghl.grasshopper-synchronize-motion-link-D}} and [Coupled Motion and Resolving Targets]{{ghl.grasshopper-coupled-motion-link-D}} tutorials.

---
