¬import gl from "../../../_shared/glossaryLinks"
¬import ghl from "../../../_shared/grasshopperLinks"


#### How to:

The first step to creating our {{gl.end-effector-link}} is to ensure that we have a 3D model of it at an appropriate level of detail. We need it to be accurate to ensure that our simulations are representative but not so detailed that we take a performance penalty from trying to render high-fidelity moving objects during simulation. Once we have that geometry in place, we need to setup some **Frames**. These include the base location of each of our {{gl.parts-link}}, this is the connection point on the {{gl.part-link}} that you would use to connect it to something else, and the {{gl.endpoints-link}}. You can use any method of **Frame** creation here including Grasshopper-native components or the HAL Robotics Framework **Frame** component. With these in place we can prepare our {{gl.parts-link}}, see the {{ghl.grasshopper-create-part-t-link}} tutorial if you are not familiar with this process. In the demo we have here this leaves us with three {{gl.parts-link}}, each stacked one on top of the other. We are going to leverage that layering to create the logical {{gl.connections-link}} between our {{gl.parts-link}}. To create a {{gl.connection-link}}, we're going to use the **Create Joint / Connection** component from the **HAL Robotics** tab, **Cell** panel and switch to the **Connection** template. Here we can pass in our `InterfacePlate` {{gl.part-link}} as the _From_ and we'll connect _To_ the `Camera` {{gl.part-link}}. The _Frame_ here is the point of connection between our {{gl.parts-link}}. Given the way our demo is modelled, this equates to the `CameraBase` **Frame**. As the _Frame_ is not relative to the `InterfacePlate` {{gl.part-link}} we'll ensure that _InWorld_ is set to `false`. We can repeat this process to connect _From_ the `Camera` {{gl.part-link}} _To_ the `Gripper` {{gl.part-link}}, again using the `GripperBase` **Frame** as the _Frame_.

That completes the preparation of the physical links but we still need to set our {{gl.endpoints-link}}. These are actually also {{gl.connections-link}} so we can start by getting that component again. We can start to prepare the `GripperTCP` by assigning the `Gripper` {{gl.part-link}} as the _From_ and the `GripperTCP` **Frame** as the _Frame_. There are two differences between the {{gl.connections-link}} we created between {{gl.parts-link}} and an {{gl.endpoint-link}}. The first is that an {{gl.endpoint-link}} has no _To_, it simply indicates an offset from the _From_ {{gl.part-link}}, and the second is that we must set _IsEndpoint_ to `true`. Our `GripperTCP` {{gl.connection-link}} should now be ready so we can repeat the same process for the `CameraTCP`.

At this stage we have a large collection of components of our {{gl.end-effector-link}} and we need to assemble them. This is done using the **Assemble** component, again from the **HAL Robotics** tab, **Cell** panel. The cleanest way to feed data into this component is using **Merge**. This allows us to constantly see which components are being assembled and change the order easily if need be. It's important that the first component in the _Component_ input is the {{gl.part-link}} that you want to use as the base of your {{gl.end-effector-link}}. For this demo that's going to be the `InterfacePlate` {{gl.part-link}}. Ensure that you have a single list of elements coming out of your **Merge** and we can feed that into **Assemble**.

At this point you should see your {{gl.endpoints-link}} labelled in the 3D view and you are free to use this {{gl.end-effector-link}} exactly as you did the preset {{gl.end-effector-link}} in the {{ghl.grasshopper-getting-started-t-link}} tutorial or your first custom {{gl.end-effector-link}} in the {{ghl.grasshopper-create-tool-t-link}} tutorial.

See the {{ghl.grasshopper-change-tool-t-link}} tutorial to see how to switch between your {{gl.endpoints-link}} during the execution of a {{gl.procedure-link}}.

---
