Â¬import gl from "../../../_shared/glossaryLinks"


#### How to:

As an example of this we can have a {{gl.manipulator-link}} drawing a straight line between two {{gl.targets-link}} that are referenced on a rotary {{gl.positioner-link}}. In order to setup **Coupled** motion we need to add some settings to all the **Motion Settings** that will be used in that **Coupled** configuration. We can create **Kinematic Settings** from the **HAL Robotics** tab, **Motion** panel and because we're dealing with multiple {{gl.mechanisms-link}} we are going to change to the **Composite Kinematic Settings** template. We are now asked to input settings for the _Primary_ and _Secondary_ {{gl.mechanisms-link}}. The former is typically the {{gl.mechanism-link}} that is moving the {{gl.targets-link}} around, historically termed "Master", and the latter is the {{gl.mechanism-link}} moving to those {{gl.targets-link}}, historically termed "Slave". In our case the {{gl.targets-link}} are referenced to the {{gl.positioner-link}} and the {{gl.manipulator-link}} is following those {{gl.targets-link}} around. We don't need to assign any additional **Kinematic Settings** to our {{gl.mechanisms-link}} so we can simply chain our {{gl.mechanisms-link}} into simple Kinematic Settings and into their positions in the **Composite Kinematic Settings**. These **Composite Kinematic Settings** can now be added to our **Motion Settings** for the **Coupled** {{gl.motion-action-motions-link}}. We have two separate sets of **Motion Settings** here; one is for the **Coupled** {{gl.motion-action-motion-link}} and the other is for an asynchronous initialization {{gl.motion-action-motion-link}} for each of the {{gl.mechanisms-link}}.

With our settings in place we can now look at programming the {{gl.positioner-link}}. We could calculate the {{gl.targets-link}} for the {{gl.positioner-link}} and set them explicitly but when we're in a scenario like this welding example we can set some rules for the {{gl.positioner-link}} to follow. We do this using the **Target Resolvers** from the **HAL Robotics** tab, **Motion** panel. There are a few different templates to explore but, in our case, the first is the one we want. The **Vector Aligned** **Target Resolver** tells the positioner to point the given _Axis_ of our {{gl.targets-link}} towards a particular direction. If we can it's normally preferable to weld with Gravity so we're going to ask the {{gl.positioner-link}} to point the Z axis of our {{gl.targets-link}} straight down. The **Target Resolver** can be used in a **Move** just like a {{gl.target-link}} provided it is duplicated to match the number of "secondary" {{gl.targets-link}}. To make that task easier we have included a template in **Move** called **Synchronized** which takes in a {{gl.procedure-link}} and a {{gl.target-link}}, or **Target Resolver**, and will create all of the necessary {{gl.motion-action-moves-link}} for you with the correct synchronization settings to match the input _Procedure_. **Synchronized** {{gl.motion-action-move-link}} creates a {{gl.procedure-link}} as an output like any other **Move** and so it can be merged and **Combined** as we would normally with any other **Move**. With both of our {{gl.procedures-link}} now complete we can **Solve** and **Simulate** to see our {{gl.positioner-link}} aligning itself automatically to best present the {{gl.targets-link}} to the {{gl.manipulator-link}}.

---
