¬import gl from "../../../_shared/glossaryLinks"
¬import ghl from "../../../_shared/grasshopperLinks"


#### How to:

There are 2 main ways of creating {{gl.targets-link}}, both of which are available from **Target** component in the **HAL Robotics** tab, **Motion** panel.

The first way of creating a {{gl.target-link}} is a {{gl.cartesian-space-link}} {{gl.target-link}} from a **Frame**. When a {{gl.manipulator-link}} moves to a {{gl.cartesian-space-link}} {{gl.target-link}} the active {{gl.endpoint-tcp-link}} of our {{gl.manipulator-link}} will align with the [Target's]{{gl.target-link-D}} position and orientation. If we create a **Frame** in Grasshopper, such as by selecting a point and making it the origin of an XY Plane. When we assign this to our {{gl.target-link}} component and hide the previous components, we can see our {{gl.target-link}} axes centred on the point we had selected. Of course, because this is Grasshopper, if we move that point our {{gl.target-link}} moves with it. We can also set the {{gl.reference-link}} here. Please take a look at the [References tutorial]{{ghl.grasshopper-create-reference-link-D}} to see how those work.

The Z axis of this {{gl.target-link}} is pointing up. In our [Tool creation tutorial]{{ghl.grasshopper-create-tool-err-link-D}}, we recommended that the Z axis of {{gl.end-effector-link}} [TCPs]{{gl.endpoint-link-D}} point out of the {{gl.end-effector-link}}, following the co-ordinate system flow of the Robot itself. That means that when our Robot reaches the {{gl.target-link}} we've just created, the {{gl.end-effector-link}} will also be pointing up. That may be desirable but remember that setting the orientation of your {{gl.targets-link}} is just as important as their positions and therefore creating the correct **Frame** is critical. We have found a number of cases where creating {{gl.targets-link}} facing directly downwards, with their X axes towards world -X is a useful default and have added a shortcut to create those by-passing points directly to a {{gl.target-link}} parameter.

The other primary way of creating a {{gl.target-link}} is in {{gl.joint-space-lc-link}}, that is by defining the desired position of each active {{gl.joint-link}} of your {{gl.manipulator-link}}. We can do this by changing the template of our {{gl.target-link}} component by right-clicking and selecting **From Joint Positions**. The inputs are now slightly different. We need to pass a {{gl.mechanism-link}} into the component to visualize the {{gl.manipulator-link}} in its final position and ensure that the _Positions_ we give are valid. The other required input is a list of the _Positions_ of each active {{gl.manipulator-link}} {{gl.joint-link}}. It's important to note that unlike many other inputs in the HAL Robotics Framework these _Positions_ must be defined in SI units (metres and radians) because they can legitimately contain both lengths and angles. If we create a few sliders, six for a six-axis {{gl.manipulator-link}}, merge into a single list and ensure that we're in SI units we can visualize the final position of our {{gl.manipulator-link}} at these {{gl.joint-link}} positions.

Using these two {{gl.target-link}} creation methods we can get our [Robots]{{gl.manipulator-link-D}} to perform any motion we require. That being said, particularly in a Grasshopper-centric workflow, we often want to follow a Curve as we did in the {{ghl.grasshopper-getting-started-t-link}} tutorial. To facilitate that we have included a **From Curve** template in the **Target** component. This variation of the component takes a _Curve_ and creates {{gl.targets-link}} to approximate the _Curve_. We do this by subdividing (or discretizing) it. The _Discretization_ can be controlled using the input and changed between straight line segments only or line segments and arcs. The accuracy of the approximation can be controlled using this _Tolerance_ input. The distance given here is the maximum allowed deviation from the input _Curve_.

All of these {{gl.target-link}} creation options give exactly the same types of {{gl.target-link}} so can be used interchangeably in your {{gl.motion-action-move-link}} components.

---
