Â¬import gl from "../../../_shared/glossaryLinks"


#### How to:

In preparation for this tutorial a number of things have been put in place. Firstly, three [Tools]{{gl.end-effector-link-D}} have been created; a simple cone, an interchange plate and a double cone with 2 distinct {{gl.endpoints-link}}. Secondly, these [Tools]{{gl.end-effector-link-D}} have each been positioned in front of the {{gl.manipulator-link}} in a known location. And finally, a {{gl.toolpath-link}} has been created to go to each of the {{gl.end-effector-link}} picking positions with a jump in between. I have also prepared the standard **Combine**, **Solve**, and **Execute** flow.

The focus of this tutorial will be on the **Change Tool** component which can be found in the **HAL Robotics** tab under **Procedure**. Each version of this component will give us a {{gl.procedure-link}} that we can Combine with {{gl.motion-action-moves-link}} and [Waits]{{gl.wait-action-link-D}} as we have done countless times before. The **Change Tool** component has 3 templates and we'll cover them all, starting with **Detach Tool**. We're going to use this to remove the `Cone` {{gl.end-effector-link}} that we've initially got attached to the {{gl.manipulator-link}}. We want to ensure the _Mechanism_ is the combined {{gl.mechanism-link}} and we can specify the _Tool_ as the `Cone` {{gl.end-effector-link}}. The _Tool_ input is actually optional and the currently active {{gl.end-effector-link}} will be removed if none is specified. We can weave this into our main {{gl.procedure-link}} and if you Solve and Execute, you'll see the Cone disappear when we hit the right {{gl.target-link}}. The `Cone` is actually in the exact position we left it but it is no longer displayed because it's not part of our {{gl.manipulator-link}}. We can use the _Environment_ input on **Execute** to force the display of mobile, non-mechanism {{gl.parts-link}}. If we now **Execute**, we should see the `Cone` hang in space where we detached it.

From here we're going to attach two [Tools]{{gl.end-effector-link-D}} to the {{gl.manipulator-link}} in succession. The first is going to be the `Interface` which acts as something of a Tool Changer. Using the **Change Tool** component and the **Attach Tool** template we can set the combined {{gl.mechanism-link}} as the _Mechanism_ again and the `Interface` as the _Tool_. Merging this into our {{gl.procedure-link}} will attach the `Interface` to our {{gl.manipulator-link}} and we can visualize the {{gl.parts-link}} before they are attached using the same technique as for the `Cone`, passing the {{gl.parts-link}} into _Environment_ on **Execute**. If we repeat this process and attach the `MultiTool` this time, you should see that the `MultiTool` gets connected to the [Active Endpoint]{{gl.endpoint-link-D}} of the {{gl.manipulator-link}}, which in this case is the end of the `Interface`. This behavior may not always be desirable e.g. stationary tools, and can be modified in the overload of **Attach Tool**.

In this final combination of [Tools]{{gl.end-effector-link-D}} attached to the {{gl.manipulator-link}} we have two distinct potential {{gl.endpoints-link}}. The final template of the **Change Tool** component allows us to set which {{gl.endpoint-link}}, or {{gl.end-effector-link}} if you have multiple distinct [Tools]{{gl.end-effector-link-D}} attached, is currently Active. We do this by specifying, once again, the combined {{gl.mechanism-link}}, and the {{gl.connection-link}} that we want to use as the [Active Endpoint]{{gl.endpoint-link-D}}. To ensure consistent and deterministic output, I would recommend doing this immediately after attaching the `MultiTool` as well as when you may wish to switch between the two {{gl.endpoints-link}}. With that merged and our {{gl.end-effector-link}} {{gl.parts-link}} in the _Environment_ we can see everything run.

---
