¬import gl from "../../../_shared/glossaryLinks"
¬import ghl from "../../../_shared/grasshopperLinks"


#### How to:

The **Motion Settings** component can be found in the **HAL Robotics** tab, **Motion** panel and can be directly passed in to the **Move** component. The four settings mentioned previously are the first inputs on this component.

_Space_ controls which path the {{gl.manipulator-link}} takes to a {{gl.target-link}}. In `Cartesian` mode the {{gl.endpoint-tcp-link}} moves in a very controlled manner along a straight line or arc. This is probably the easier motion type to visualize but can cause problems when moving between configurations or when trying to optimise cycle times. Moving in {{gl.joint-space-lc-link}} means that each {{gl.joint-link}} will move from one position to the next without consideration for the position of the {{gl.endpoint-tcp-link}}. {{gl.joint-space-lc-link}} {{gl.motion-action-moves-link}} always end in the same configuration and are not liable to [Singularities]{{gl.singularity-link-D}}. It's often useful to start your {{gl.procedures-link}} with a {{gl.motion-action-motion-link}} in {{gl.joint-space-lc-link}} to ensure your {{gl.manipulator-link}} is always initialized to a known position and configuration. It's worth noting that when using {{gl.joint-space-lc-link}} {{gl.motion-action-motions-link}} your {{gl.toolpath-link}} will be dotted until the {{gl.procedure-link}} is {{gl.solving-d-link}} because we can't know ahead of time exactly where the {{gl.endpoint-tcp-link}} will go during that {{gl.motion-action-motion-link}}. Once {{gl.solving-d-link}}, you will see the path your {{gl.endpoint-tcp-link}} will actually take in space.

_Speed_ settings, as the name implies, constrain the speed of your {{gl.manipulator-link}}. They can be declared in [Cartesian space]{{gl.cartesian-space-link-D}} to directly limit the position or orientation _Speed_ of the {{gl.endpoint-tcp-link}}. You can also constrain the _Speeds_ of your [Robot's]{{gl.manipulator-link-D}} {{gl.joints-link}} using the second overload or combine the two using the third overload. Please note that not all {{gl.manipulator-link}} manufacturers support programmable [Joint]{{gl.endpoint-link-D}} speed constraints so there may be variations between your simulation and real {{gl.manipulator-link}} when they are used.

_Acceleration_ settings constrain the acceleration of your {{gl.manipulator-link}}. They function in exactly the same way as the _Speeds_, constraining {{gl.cartesian-space-link}} acceleration, [Joint]{{gl.joint-space-link-D}} acceleration or both.

_{{gl.blends-link}}_ sometimes called zones or approximations change how close the {{gl.manipulator-link}} needs to get to a {{gl.target-link}} before moving on to the next. It's useful to consider your _{{gl.blends-link}}_ carefully because increasing their size can drastically improve cycle time by allowing the {{gl.manipulator-link}} to maintain speed instead of coming to a stop at each {{gl.target-link}}. _{{gl.blends-link}}_ are most easily visualized in _Position_. If we set a 100 mm radius {{gl.blend-link}}, we can see circles appear around each {{gl.target-link}}. These indicate that the {{gl.manipulator-link}} will exactly follow our {{gl.toolpath-link}} until it gets within 100 mm of the {{gl.target-link}}, at which point it will start to deviate within that circle to keep its speed up and head towards the subsequent {{gl.target-link}}. It will exactly follow our {{gl.toolpath-link}} again when it leaves the circle. When we solve our {{gl.procedure-link}}, we can see the path our {{gl.endpoint-tcp-link}} will actually take getting close but not actually to all of our {{gl.targets-link}}.

_Kinematic_ settings are a more advanced topic and will be discussed in future tutorials ([1]{{ghl.grasshopper-coupled-motion-link-D}},[2]{{ghl.grasshopper-target-constraints-link-D}},[3]{{ghl.grasshopper-mechanism-constraints-link-D}}.

---
